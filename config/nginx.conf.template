daemon off;
worker_processes auto;
pcre_jit on;

pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

error_log /dev/stdout notice;

http {
  resolver 127.0.0.1 ipv6=off;

  sendfile on;
  access_log off;
  server_tokens off;

  client_max_body_size 10m;
  lua_shared_dict blacklist 16m;

  init_by_lua_block {
    require 'zlib'

    for line in io.open('/etc/tor2web/blacklist.txt'):lines() do
      local hash = ngx.re.match(line, '[a-f0-9]{32}')
      if hash then
        ngx.shared.blacklist:set(hash[0], true)
      end
    end
  }

  server {
    listen ${PORT};

    server_name '~^(?<subdomain>[0-9a-z.-]+\.)?(?<pubkey>[2-7a-z]{56})\.${TOR2WEB_HOST_PATTERN}$';

    location / {
      proxy_http_version 1.1;
      proxy_buffers 16 4k;
      proxy_buffer_size 2k;
      proxy_pass http://$pubkey.onion;
      proxy_set_header Host $subdomain$pubkey.onion;
      proxy_set_header Accept-Encoding 'gzip, deflate';
      proxy_redirect '~^(https?://([0-9a-z.-]+\.)?([2-7a-z]{56}))\.onion(.*)$' $1.${TOR2WEB_HOST}$4;
      proxy_intercept_errors on;
      error_page 451 /451.html;
      error_page 500 502 503 504 /50x.html;

      gzip on;
      gzip_proxied any;
      gzip_types text/plain text/html text/css text/javascript text/xml application/json application/xml;

      access_by_lua_block {
        if ngx.shared.blacklist:get(ngx.md5(ngx.var.pubkey .. '.onion')) then
          ngx.exit(ngx.HTTP_ILLEGAL)
        end
      }

      rewrite_by_lua_block {
        local hdrs = ngx.req.get_headers()
        if hdrs['Referer'] then
          local newRef = ngx.re.gsub(
            hdrs['Referer'],
            '//([0-9a-z.-]+\\.)?([2-7a-z]{56})\\.${TOR2WEB_HOST}',
            '//$1$2.onion'
          )
          ngx.req.set_header("Referer", newRef)
        end
      }

      header_filter_by_lua_block {
        if not ngx.header['Onion-Location'] then
          ngx.header['Onion-Location'] =
            'http://' .. ngx.var.subdomain .. ngx.var.pubkey .. '.onion' .. ngx.var.request_uri
        end

        if ngx.header.content_type and ngx.header.content_type:find('text/html') ~= 1 then
          return
        end

        if ngx.header.content_encoding == 'gzip' or
            ngx.header.content_encoding == 'deflate' then
          ngx.header.content_encoding = 'deflate'
          ngx.ctx.decompress = zlib.inflate()
          ngx.ctx.compress = zlib.deflate()
        end

        ngx.header.content_length = nil

        local lolhtml = require 'lolhtml'

        local function rewrite_url_in_attr(el, attr)
          local val = ngx.re.gsub(
            el:get_attribute(attr),
            '//([0-9a-z.-]+\\.)?([2-7a-z]{56})\\.onion',
            '//$1$2.${TOR2WEB_HOST}'
          )
          el:set_attribute(attr, val)
        end

        ngx.ctx.rewriter = lolhtml.new_rewriter {
          builder = lolhtml.new_rewriter_builder()
            :add_element_content_handlers {
              selector = lolhtml.new_selector('a[href], link[rel=stylesheet][href], base[href]'),
              element_handler = function(el) rewrite_url_in_attr(el, 'href') end,
            }
            :add_element_content_handlers {
              selector = lolhtml.new_selector(
                'script[src], iframe[src], img[src], audio[src], video[src]'
              ),
              element_handler = function(el) rewrite_url_in_attr(el, 'src') end,
            }
            :add_element_content_handlers {
              selector = lolhtml.new_selector('form[action]'),
              element_handler = function(el) rewrite_url_in_attr(el, 'action') end,
            }
            :add_element_content_handlers {
              selector = lolhtml.new_selector('button[formaction]'),
              element_handler = function(el) rewrite_url_in_attr(el, 'formaction') end,
            }
            :add_element_content_handlers {
              selector = lolhtml.new_selector('body'),
              element_handler = function(el)
                el:prepend([[${TOR2WEB_DISCLAIMER}]], true)
              end
            },

          sink = function(str)
            ngx.ctx.buffer = ngx.ctx.buffer .. str
          end
        }
      }

      body_filter_by_lua_block {
        if not ngx.ctx.rewriter then return end

        ngx.ctx.buffer = ''

        local chunk = string.len(ngx.arg[1]) > 0 and
          ngx.ctx.decompress and
          ngx.ctx.decompress(ngx.arg[1]) or
          ngx.arg[1]

        ngx.ctx.rewriter:write(chunk)

        if ngx.arg[2] then
          ngx.ctx.rewriter:close()
        end

        ngx.arg[1] = ngx.ctx.compress and
          ngx.ctx.compress(ngx.ctx.buffer, ngx.arg[2] and 'finish') or
          ngx.ctx.buffer
      }
    }

    location = /50x.html {
      root /etc/tor2web/errors;
    }

    location = /451.html {
      root /etc/tor2web/errors;
    }

    location /robots.txt {
      root /var/www/html;
    }
  }
}
